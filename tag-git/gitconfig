[user]
  name = Matt Odille
  useConfigOnly = true

[github]
  user = modille

[alias]
  a = add
  b = "!f() { nvim -c 'Gblame' $1; }; f"
  br = branch --sort=-committerdate --format='%(color:green)%(committerdate:relative)%(color:reset) %(refname:short)'
  cane = commit --amend --no-edit
  cnv = commit --no-verify
  co = checkout
  d = diff
  dc = diff --cached
  discard-unstaged = checkout -- .
  discard-untracked = clean -d --force
  f = fetch
  fp = fetch --prune
  get = "!f() { \
           repo_host=`echo $1 | cut -d '/' -f1`; \
           repo_path=`echo $1 | cut -d '/' -f2-`; \
           git clone git@$repo_host:$repo_path ~/git/$repo_host/$repo_path; \
         }; f"
  l = log --abbrev-commit --decorate
  lg = log --abbrev-commit --decorate --graph --stat
  lgp = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
  lr = log --remotes --no-walk --oneline
  mrs = "!f() { \
           gitlab merge_requests `git remote get-url origin | cut -d':' -f2` '{state: opened}' --only=source_branch,title,web_url; \
         }; f"
  nuke = !git reset --hard HEAD && git clean -d --force
  pick = cherry-pick
  pr = pull --rebase
  push-up = push --set-upstream origin
  reset-hard = reset --hard HEAD^
  reset-soft = reset --soft HEAD^
  rh = reset --hard
  ri = rebase -i
  rpo = remote prune origin
  rr = for-each-ref --format='%(refname:strip=3)' refs/remotes
  rs = reset --soft
  s = status
  si = submodule init
  su = submodule update
  suir = submodule update --init --recursive
  sw = switch

  # Alias praise to blame, and use vim for colorized blame
  praise = "!f() { nvim -c 'Gblame' $1; }; f"

  # https://csswizardry.com/2017/05/little-things-i-like-to-do-with-git/
  recent-branches = for-each-ref --count=10 --sort=-committerdate refs/heads/ --format="%(refname:short)"
  all-since = "!f() { git log --all --oneline --no-merges --since=\"$1\" --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'; }; f"
  me-since = "!f() {  git log --all --oneline --no-merges --since=\"$1\" --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --author=$GIT_AUTHOR_EMAIL; }; f"
  word-diff = diff --word-diff
  char-diff = diff --word-diff-regex="."
  upstream = log --abbrev-commit --decorate HEAD..origin/

  # http://gggritso.com/human-git-aliases
  branches = branch -a
  discard = checkout --
  remotes = remote -v
  stashes = stash list
  tags = tag
  unstage = reset HEAD --

  # list files which have changed since REVIEW_BASE
  # (REVIEW_BASE defaults to 'origin/develop' in my zshrc)
  files = !git diff --name-only $(git merge-base HEAD \"$REVIEW_BASE\") \":(exclude)package-lock.json\" \":(exclude)features/auto_mocks/*\"

  # Same as above, but with a diff stat instead of just names
  # (better for interactive use)
  stat = !git diff --stat $(git merge-base HEAD \"$REVIEW_BASE\")
  # ignore test files
  statsrc = !git diff --stat $(git merge-base HEAD \"$REVIEW_BASE\") \":(exclude)features/*\" \":(exclude)spec/*\" \":(exclude)*/__tests__/*\" \":(exclude)*/__mocks__/*\"

  # Visualizing relationships between files
  # git depgraph | imgcat
  ; depgraph = !git madge image --basedir . --exclude \".*_spec\\.js\" --exclude \".*__mocks__/*\" --style solarized-light src
  depgraph = !git madge image --basedir . --style solarized-light src

  # Open all files changed since REVIEW_BASE in Vim tabs
  # Then, run fugitive's :Gvdiffsplit in each tab
  review = !nvim -p $(git files) +\"tabdo Gvdiffsplit $REVIEW_BASE\"

  # Same as the above, except specify names of files as arguments,
  # instead of opening all files:
  # git reviewone foo.js bar.js
  reviewone = !nvim -p +\"tabdo Gvdiffsplit $REVIEW_BASE\"

[color]
  ui = auto
[color "diff"]
  commit = green
  frag = blue
  meta = blue bold
  new = green
  old = red
  whitespace = red reverse
[color "diff-highlight"]
  newHighlight = "green 22"
  newNormal = green
  oldHighlight = "red 52"
  oldNormal = red
[color "status"]
  added = green
  changed = yellow
  untracked = red

[commit]
  template = ~/.gitmessage

[core]
  autocrlf = input
  editor = nvim
  excludesfile = ~/.gitignore
  pager = delta --light

[delta]
  theme = 'Solarized (light)'

[diff]
  guitool = diffmerge

[gitsh]
  noGreeting = true

[interactive]
  diffFilter = delta --color-only --light

[mergetool]
  keepBackup = false

[pull]
  ff = only

[push]
  default = current

[status]
  submoduleSummary = true
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true

[init]
	defaultBranch = master
