" vim:fdm=marker
" vimrc

" ----------------------------------------------------------------------------
"  Vim package manager {{{1
" ----------------------------------------------------------------------------
" Setup {{{2
if has('vim_starting')
  set runtimepath+=~/dotfiles/vim/
endif

" Auto-install vim-plug
if empty(glob('~/dotfiles/vim/autoload/plug.vim'))
  silent !mkdir -p ~/dotfiles/vim/autoload
  silent !curl -fLo ~/dotfiles/vim/autoload/plug.vim
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall
endif

call plug#begin('~/dotfiles/vim/plugged')

" Colorschemes {{{2
Plug 'sjl/badwolf'

" Language support {{{2
Plug 'elixir-lang/vim-elixir', { 'for': ['eelixer', 'elixer'] }
Plug 'nginx/nginx', { 'rtp': 'contrib/vim' }
Plug 'tmux-plugins/vim-tmux', { 'for': 'tmux' }
Plug 'tpope/vim-rails'
Plug 'wavded/vim-stylus', { 'for': 'stylus' }
Plug 'wting/rust.vim', { 'for': 'rust' }

" Other plugins {{{2
Plug 'airblade/vim-gitgutter'
Plug 'ap/vim-css-color' " Highlight colors in CSS files
Plug 'bling/vim-airline'
Plug 'godlygeek/tabular'
Plug 'heavenshell/vim-jsdoc'
Plug 'honza/vim-snippets'
Plug 'kshenoy/vim-signature' " Show bookmarks in gutter
Plug 'lambdalisue/unite-grep-vcs'
Plug 'nathanaelkane/vim-indent-guides', { 'on': 'IndentGuidesToggle' }
Plug 'schickling/vim-bufonly'
Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeFind', 'NERDTreeToggle'] }
Plug 'scrooloose/syntastic'
Plug 'shougo/unite.vim'
Plug 'shougo/unite-outline'
Plug 'shougo/vimproc.vim', { 'do': 'make' }
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'xolox/vim-misc' " Required for vim-session
Plug 'xolox/vim-session'
Plug 'xuyuanp/nerdtree-git-plugin'

" Neovim-only plugins {{{2
if has('nvim')
 Plug 'osyo-manga/vim-brightest' " Highlight word under cursor
 Plug 'sirver/ultisnips'
 Plug 'valloric/YouCompleteMe', { 'do': './install.py' }
endif

call plug#end()

filetype plugin indent on

" ----------------------------------------------------------------------------
"  General settings {{{1
" ----------------------------------------------------------------------------
let mapleader = ',' " Use comma as leader key

" Re-center as you go through search results
map n  nzz
map N  Nzz
map *  *zz

" Change cwd to current file
map <Leader>cd :cd %:p:h<CR>

" Format XML files
map <Leader>fx !%xmllint --format --recover -

" Use +/- in normal mode to increment/decrement number
nmap <silent> + <C-a>
nmap <silent> - <C-x>

" In visual mode, use Y to copy to system clipboard
vnoremap Y "*y 

" ----------------------------------------------------------------------------
"  Plugin settings {{{1
" ----------------------------------------------------------------------------
" Airline {{{2
let g:airline#extensions#hunks#enabled=0
let g:airline_powerline_fonts = 1 "Add powerline fonts to the dictionary
let g:airline_section_y = 'BN: %{bufnr("%")}' "Replace file encoding info with buffer number
let g:bufferline_echo = 0

" Indent Guides {{{2
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1

" Marks {{{2
nmap <silent> <Leader>st :SignatureToggle<CR>

" Nerdtree {{{2
nmap <silent> <Leader>nt :NERDTreeToggle<CR>
nmap <silent> <Leader>nc :NERDTreeCWD<CR>
nmap <silent> <Leader>nf :NERDTreeFind<CR>

" Session {{{2
let g:session_autosave = 'yes'
let g:session_autosave_periodic = 1
let g:session_autosave_silent = 1
let g:session_default_to_last = 1
let g:session_autoload = 'no'

" Syntastic {{{2
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_javascript_checkers = ['jscs', 'jshint']

" Tabular {{{2
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a: :Tabularize /:\zs/l0l1<CR>
vmap <Leader>a: :Tabularize /:\zs/l0l1<CR>

" Ultisnips {{{2
let g:ycm_key_list_previous_completion = ['<Up>']
let g:ycm_key_list_select_completion = ['<Down>']
let g:UltiSnipsSnippetDirectories=['Ultisnips', 'custom_snippets']
let g:UltiSnipsExpandTrigger='<tab>'
let g:UltiSnipsJumpForwardTrigger='<tab>'
let g:UltiSnipsJumpBackwardTrigger='<s-tab>'

" Unite {{{2
call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#filters#sorter_default#use(['sorter_rank'])
let g:unite_data_directory = '~/.vim/.cache/unite'
let g:unite_enable_start_insert = 1
if executable('ag')
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts = '-i --line-numbers --nocolor --nogroup --hidden --follow'
  let g:unite_source_grep_recursive_opt = ''
endif
let g:unite_source_file_rec_max_cache_files = 0
call unite#custom_source('file_rec,file_rec/async', 'max_candidates', 0)
call unite#custom_source('file_rec,file_rec/async,grep', 'ignore_pattern', join([
     \ '\.git/',
     \ '\.yardoc/',
     \ '.*\.log',
     \ '.*/translations.js',
     \ 'bower_components/',
     \ 'coverage/',
     \ 'dist/',
     \ 'doc/.*/.*\.html',
     \ 'node_modules/',
     \ 'tags/',
     \ 'tmp/',
     \ ], '\|'))
nnoremap <silent> <Leader>r :Unite -buffer-name=files file_rec:!<CR>
nnoremap <silent> <Leader>b :Unite -buffer-name=buffers buffer<CR>
nnoremap <silent> <Leader>g :Unite -buffer-name=search grep/git<CR>

" ----------------------------------------------------------------------------
"  Moving around, searching and patterns {{{1
" ----------------------------------------------------------------------------
set ignorecase " Searches are case insensitive
set smartcase  " Unless they contain at least one capital letter

" ----------------------------------------------------------------------------
"  Displaying text {{{1
" ----------------------------------------------------------------------------
set number " Show line numbers

" ----------------------------------------------------------------------------
"  Syntax, highlighting and spelling {{{1
" ----------------------------------------------------------------------------
au BufNewFile,BufRead *.gradle set filetype=groovy
au BufNewFile,BufRead *.md set syntax=markdown
set background=dark
colorscheme badwolf
if exists('+colorcolumn')
  set colorcolumn=120
endif
set hlsearch " Highlight matches of most recent search

" ----------------------------------------------------------------------------
"  Multiple windows {{{1
" ----------------------------------------------------------------------------
set hidden       " Hide abandoned buffers instead of unloading (preserves undo history)
set laststatus=2 " Allows airline to show up without having to split

" ----------------------------------------------------------------------------
"  Messages and info {{{1
" ----------------------------------------------------------------------------
set noshowmode " Hide default mode display, since Airline displays it

" ----------------------------------------------------------------------------
"  Tabs and indenting {{{1
" ----------------------------------------------------------------------------
set expandtab    " Replace tabs with spaces
set tabstop=2    " Tab = 2 spaces
set shiftwidth=2 " Autoindent indents 2 spaces

" ----------------------------------------------------------------------------
"  Folding {{{1
" ----------------------------------------------------------------------------
if has('folding')
  set foldmethod=syntax
  set nofoldenable " Open all folds when opening a file
endif

" ----------------------------------------------------------------------------
"  The swap file {{{1
" ----------------------------------------------------------------------------
set nobackup      " No backup files
set noswapfile    " No swap files
set nowritebackup " No backup files while editing

" ----------------------------------------------------------------------------
"  Autocmds {{{1
" ----------------------------------------------------------------------------
autocmd FileType gitcommit setlocal spell spelllang=en_us " Spellcheck commit messages

" Highlight in red after 120 chars
augroup vimrc_autocmds
  autocmd BufEnter * highlight OverLength ctermbg=red ctermfg=white guibg=#FFD9D9
  autocmd BufEnter * match OverLength /\%121v.\+/
augroup END

" Highlight trailing whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter *.rb match ExtraWhitespace /\s\+$/
autocmd InsertEnter *.rb match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave *.rb match ExtraWhitespace /\s\+$/
autocmd BufWinLeave *.rb call clearmatches()

" Enable mouse scrolling in tmux
" set mouse=a

" Safely alias :W to :w
" cnoreabbrev <expr> W ((getcmdtype() is# ':' && getcmdline() is# 'W')?('w'):('W'))

" let g:python_host_skip_check = 1
" let g:python3_host_skip_check = 1
