if has('vim_starting')
  set runtimepath+=~/dotfiles/vim/
endif

"" Auto-install Plug
if empty(glob('~/dotfiles/vim/autoload/plug.vim'))
  silent !mkdir -p ~/dotfiles/vim/autoload
  silent !curl -fLo ~/dotfiles/vim/autoload/plug.vim
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall
endif

call plug#begin('~/dotfiles/vim/plugged')

Plug 'airblade/vim-gitgutter'
Plug 'bling/vim-airline'
Plug 'drmikehenry/vim-fontsize'
Plug 'haya14busa/incsearch.vim'
Plug 'heavenshell/vim-jsdoc'
Plug 'honza/vim-snippets'
Plug 'kshenoy/vim-signature'
Plug 'Lokaltog/vim-easymotion'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'nicwest/QQ.vim'
Plug 'osyo-manga/vim-brightest'
Plug 'rking/ag.vim'
Plug 'rstacruz/sparkup'
Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeFind', 'NERDTreeToggle'] }
Plug 'scrooloose/syntastic'
Plug 'shougo/unite.vim'
Plug 'shougo/unite-outline'
Plug 'shougo/vimproc.vim', { 'do': 'make' }
Plug 'sirver/ultisnips'
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'valloric/YouCompleteMe', { 'do': './install.sh' }
Plug 'xolox/vim-misc'
Plug 'xolox/vim-notes'
Plug 'xolox/vim-session'
Plug 'xuyuanp/nerdtree-git-plugin'

" Language support
Plug 'elixir-lang/vim-elixir'
Plug 'parkr/vim-jekyll'
Plug 'tmux-plugins/vim-tmux'
Plug 'tpope/vim-rails'
Plug 'wavded/vim-stylus'
Plug 'wting/rust.vim'

" Themes
Plug '29decibel/codeschool-vim-theme'
Plug 'ajh17/Spacegray.vim'
Plug 'altercation/vim-colors-solarized'
Plug 'fmoralesc/molokayo'
Plug 'gosukiwi/vim-atom-dark'
Plug 'morhetz/gruvbox'
Plug 'nanotech/jellybeans.vim'
Plug 'sickill/vim-monokai'
Plug 'sjl/badwolf'
Plug 'tomasr/molokai'
Plug 'tpope/vim-vividchalk'
Plug 'w0ng/vim-hybrid'
Plug 'whatyouhide/vim-gotham'
Plug 'yearofmoo/Vim-Darkmate'
Plug 'zeis/vim-kolor'
Plug 'zenorocha/dracula-theme', {'rtp': 'vim/'}

call plug#end()

filetype plugin indent on

"" Fonts
if has('gui_running')
  if has('gui_win32')
    set guifont=Bitstream_Vera_Sans_Mono:h16:cANSI
  else
    set guifont=DejaVu\ Sans\ Mono\ for\ Powerline
  endif
endif

"" General
if !has('gui_running')
  let g:gruvbox_italic=0
endif
syntax enable
set background=dark
colorscheme kolor
" colorscheme monokai
" colorscheme gruvbox
let mapleader = ','
set colorcolumn=80
augroup vimrc_autocmds
  autocmd BufEnter * highlight OverLength ctermbg=red ctermfg=white guibg=#FFD9D9
  autocmd BufEnter * match OverLength /\%121v.\+/
augroup END
set foldmethod=syntax
set nofoldenable
set number
set tabstop=2 shiftwidth=2 expandtab
"Don't use swap files
set nobackup
set noswapfile
set nowb
"Hide abandoned buffers instead of unloading (preserves undo history)
set hidden
"Map the arrow keys to be based on display lines, not physical lines
" map <Down> gj
" map <Up> gk
"Enable mouse scrolling in tmux
set mouse=a
vmap <C-c> "+y
"Safely alias :W to :w
cnoreabbrev <expr> W ((getcmdtype() is# ':' && getcmdline() is# 'W')?('w'):('W'))
set backspace=2
"Auto-read file on cursor hold
set autoread
au CursorHold,CursorHoldI * silent! checktime
nmap <leader>ct :checktime<CR>

"" Airline
let g:airline#extensions#hunks#enabled=0
let g:airline_powerline_fonts = 1 "Add powerline fonts to the dictionary
let g:airline_section_y = 'BN: %{bufnr("%")}' "Replace file encoding info with buffer number
let g:bufferline_echo = 0
set laststatus=2 "Have airline show up without having to split
set noshowmode   "Hide default mode display

"" EasyMotion
nmap f <Plug>(easymotion-t2)
nmap s <Plug>(easymotion-s2)
nmap t <Plug>(easymotion-t2)
let g:EasyMotion_smartcase = 1

"" Fugitive
nmap <silent> <Leader>Gb :Gblame<CR>
nmap <silent> <Leader>Gs :Gstatus<CR>

"" Gradle
au BufNewFile,BufRead *.gradle set filetype=groovy

"" Highlight trailing whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter *.rb match ExtraWhitespace /\s\+$/
autocmd InsertEnter *.rb match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave *.rb match ExtraWhitespace /\s\+$/
autocmd BufWinLeave *.rb call clearmatches()

"" Incremental search
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
"n and N directions are always forward and backward respectively even after performing backward search
let g:incsearch#consistent_n_direction = 1
"Auto-nohlsearch
set hlsearch
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)zz
map N  <Plug>(incsearch-nohl-N)zz
map *  <Plug>(incsearch-nohl-*)zz
map #  <Plug>(incsearch-nohl-#)zz
map g* <Plug>(incsearch-nohl-g*)zz
map g# <Plug>(incsearch-nohl-g#)zz
"Searches are case insensitive
set ignorecase
"Unless they contain at least one capital letter
set smartcase

"" Indent Guides
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1

"" Markdown
au BufRead,BufNewFile *.md set syntax=markdown

"" Marks
nmap <silent> <Leader>sm :SignatureToggle<CR>

"" Nerdtree
nmap <silent> <Leader>nt :NERDTreeToggle<CR>
nmap <silent> <Leader>nc :NERDTreeCWD<CR>
nmap <silent> <Leader>nf :NERDTreeFind<CR>

"" Session
let g:session_autosave = 'yes'
let g:session_autosave_periodic = 1
let g:session_default_to_last = 1
let g:session_autoload = 'yes'

"" Syntastic
let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
let g:syntastic_javascript_closure_compiler_path = '~/bin/compiler.jar'
let g:syntastic_javascript_checkers = ['gjslint']
let g:syntastic_javascript_gjslint_args = '--strict'

"" Ultisnips
let g:ycm_key_list_previous_completion=['<Up>']
let g:UltiSnipsExpandTrigger='<s-tab>'
let g:UltiSnipsJumpForwardTrigger='<c-n>'
let g:UltiSnipsJumpBackwardTrigger='<c-z>'

"" Unite
call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#filters#sorter_default#use(['sorter_rank'])
"Allow yank history searching
let g:unite_source_history_yank_enable = 1
let g:unite_data_directory = '~/.vim/.cache/unite'
let g:unite_enable_start_insert = 1
"Use Silver Searcher for grepping
if executable('ag')
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts = '-i --line-numbers --nocolor --nogroup --hidden --follow'
  let g:unite_source_grep_recursive_opt = ''
endif
let g:unite_source_file_rec_max_cache_files = 0
call unite#custom_source('file_rec,file_rec/async', 'max_candidates', 0)
"Custom menu
if !exists('g:unite_source_menu_menus')
    let g:unite_source_menu_menus = {}
endif
let g:unite_source_menu_menus.my_commands = {
\    'description': 'My Commands'
\ }
let g:unite_source_menu_menus.my_commands.command_candidates = [
\   ['Toggle spell check (z= for suggestions)', 'setlocal spell! spelllang=en_us']
\ ]
"m = Open custom menu
nnoremap <silent> <Leader>m :Unite menu:my_commands<CR>
"r = Find file by name
nnoremap <silent> <Leader>r :Unite -buffer-name=files -start-insert file_rec:!<CR>
"b = List buffers
nnoremap <silent> <Leader>b :Unite buffer bookmark<CR>
"g = Grep
nnoremap <silent> <Leader>g :Unite -buffer-name=search -start-insert grep:!<CR>
"o = Outline
nnoremap <silent> <Leader>o :Unite -start-insert -vertical outline<CR>
"y = Yank history
nnoremap <silent> <Leader>y :Unite history/yank<CR>

"" Wildmenu
"Make auto-complete behave more *nix-like
set wildmode=longest:full
set wildmenu

"" XML
let g:xml_syntax_folding=1
au FileType xml setlocal foldmethod=syntax
map <Leader>fx !%xmllint --format --recover -

"" Miscellaneous shortcuts
"Change cwd to current file
map <Leader>cd :cd %:p:h<CR>
"Format entire file
nnoremap <leader>fef :normal! gg=G``<CR>
"F7 to toggle spellcheck
imap <F7> <C-o>:setlocal spell! spelllang=en_us<CR>
nn <F7> :setlocal spell! spell? spelllang=en_us<CR>
autocmd FileType gitcommit setlocal spell spelllang=en_us
"Toggle hlsearch
nmap <leader>hs :set hlsearch! hlsearch?<CR>
"Toggle text wrap
nmap <silent> <leader>tw :set invwrap<CR>:set wrap?<CR>
" Yank text to the system clipboard
vmap <C-c> y: call system("xclip -i -selection clipboard", getreg("\""))<CR>
" C-s to save; See also http://vim.wikia.com/wiki/Map_Ctrl-S_to_save_current_or_new_files
noremap <silent> <C-s> :update<CR>
vnoremap <silent> <C-s> <C-C>:update<CR>
inoremap <silent> <C-s> <C-O>:update<CR>
" Use +/- in normal mode to increment/decrement number
nmap <silent> + <C-a>
nmap <silent> - <C-x>

"" Disable toolbar and menu
set guioptions-=mcheme
set guioptions-=T
set guioptions-=m
set guioptions-=M
